// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commitment.proto

#include "commitment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace safeheron {
namespace proto {
PROTOBUF_CONSTEXPR KGD::KGD(
    ::_pbi::ConstantInitialized)
  : blindfactor_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , y_(nullptr){}
struct KGDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KGDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KGDDefaultTypeInternal() {}
  union {
    KGD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KGDDefaultTypeInternal _KGD_default_instance_;
PROTOBUF_CONSTEXPR KGD_Num::KGD_Num(
    ::_pbi::ConstantInitialized)
  : num_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , blindfactor_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct KGD_NumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KGD_NumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KGD_NumDefaultTypeInternal() {}
  union {
    KGD_Num _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KGD_NumDefaultTypeInternal _KGD_Num_default_instance_;
}  // namespace proto
}  // namespace safeheron
static ::_pb::Metadata file_level_metadata_commitment_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_commitment_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_commitment_2eproto = nullptr;

const uint32_t TableStruct_commitment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::KGD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::KGD, y_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::KGD, blindfactor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::KGD_Num, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::KGD_Num, num_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::KGD_Num, blindfactor_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::safeheron::proto::KGD)},
  { 8, -1, -1, sizeof(::safeheron::proto::KGD_Num)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::safeheron::proto::_KGD_default_instance_._instance,
  &::safeheron::proto::_KGD_Num_default_instance_._instance,
};

const char descriptor_table_protodef_commitment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020commitment.proto\022\017safeheron.proto\032\021cur"
  "ve_point.proto\"B\n\003KGD\022&\n\001y\030\001 \001(\0132\033.safeh"
  "eron.proto.CurvePoint\022\023\n\013blindFactor\030\002 \001"
  "(\t\"+\n\007KGD_Num\022\013\n\003num\030\001 \001(\t\022\023\n\013blindFacto"
  "r\030\002 \001(\tb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_commitment_2eproto_deps[1] = {
  &::descriptor_table_curve_5fpoint_2eproto,
};
static ::_pbi::once_flag descriptor_table_commitment_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_commitment_2eproto = {
    false, false, 175, descriptor_table_protodef_commitment_2eproto,
    "commitment.proto",
    &descriptor_table_commitment_2eproto_once, descriptor_table_commitment_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_commitment_2eproto::offsets,
    file_level_metadata_commitment_2eproto, file_level_enum_descriptors_commitment_2eproto,
    file_level_service_descriptors_commitment_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_commitment_2eproto_getter() {
  return &descriptor_table_commitment_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_commitment_2eproto(&descriptor_table_commitment_2eproto);
namespace safeheron {
namespace proto {

// ===================================================================

class KGD::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& y(const KGD* msg);
};

const ::safeheron::proto::CurvePoint&
KGD::_Internal::y(const KGD* msg) {
  return *msg->y_;
}
void KGD::clear_y() {
  if (GetArenaForAllocation() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
}
KGD::KGD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.KGD)
}
KGD::KGD(const KGD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blindfactor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    blindfactor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blindfactor().empty()) {
    blindfactor_.Set(from._internal_blindfactor(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_y()) {
    y_ = new ::safeheron::proto::CurvePoint(*from.y_);
  } else {
    y_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.KGD)
}

inline void KGD::SharedCtor() {
blindfactor_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  blindfactor_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
y_ = nullptr;
}

KGD::~KGD() {
  // @@protoc_insertion_point(destructor:safeheron.proto.KGD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KGD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  blindfactor_.Destroy();
  if (this != internal_default_instance()) delete y_;
}

void KGD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KGD::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.KGD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blindfactor_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KGD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .safeheron.proto.CurvePoint y = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_y(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string blindFactor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_blindfactor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.KGD.blindFactor"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KGD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.KGD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.CurvePoint y = 1;
  if (this->_internal_has_y()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::y(this),
        _Internal::y(this).GetCachedSize(), target, stream);
  }

  // string blindFactor = 2;
  if (!this->_internal_blindfactor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blindfactor().data(), static_cast<int>(this->_internal_blindfactor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.KGD.blindFactor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_blindfactor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.KGD)
  return target;
}

size_t KGD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.KGD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string blindFactor = 2;
  if (!this->_internal_blindfactor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blindfactor());
  }

  // .safeheron.proto.CurvePoint y = 1;
  if (this->_internal_has_y()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *y_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KGD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KGD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KGD::GetClassData() const { return &_class_data_; }

void KGD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KGD *>(to)->MergeFrom(
      static_cast<const KGD &>(from));
}


void KGD::MergeFrom(const KGD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.KGD)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_blindfactor().empty()) {
    _internal_set_blindfactor(from._internal_blindfactor());
  }
  if (from._internal_has_y()) {
    _internal_mutable_y()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KGD::CopyFrom(const KGD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.KGD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KGD::IsInitialized() const {
  return true;
}

void KGD::InternalSwap(KGD* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &blindfactor_, lhs_arena,
      &other->blindfactor_, rhs_arena
  );
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KGD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_commitment_2eproto_getter, &descriptor_table_commitment_2eproto_once,
      file_level_metadata_commitment_2eproto[0]);
}

// ===================================================================

class KGD_Num::_Internal {
 public:
};

KGD_Num::KGD_Num(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.KGD_Num)
}
KGD_Num::KGD_Num(const KGD_Num& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    num_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_num().empty()) {
    num_.Set(from._internal_num(), 
      GetArenaForAllocation());
  }
  blindfactor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    blindfactor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blindfactor().empty()) {
    blindfactor_.Set(from._internal_blindfactor(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.KGD_Num)
}

inline void KGD_Num::SharedCtor() {
num_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  num_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
blindfactor_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  blindfactor_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KGD_Num::~KGD_Num() {
  // @@protoc_insertion_point(destructor:safeheron.proto.KGD_Num)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KGD_Num::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  num_.Destroy();
  blindfactor_.Destroy();
}

void KGD_Num::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KGD_Num::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.KGD_Num)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_.ClearToEmpty();
  blindfactor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KGD_Num::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_num();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.KGD_Num.num"));
        } else
          goto handle_unusual;
        continue;
      // string blindFactor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_blindfactor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.KGD_Num.blindFactor"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KGD_Num::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.KGD_Num)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string num = 1;
  if (!this->_internal_num().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_num().data(), static_cast<int>(this->_internal_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.KGD_Num.num");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_num(), target);
  }

  // string blindFactor = 2;
  if (!this->_internal_blindfactor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blindfactor().data(), static_cast<int>(this->_internal_blindfactor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.KGD_Num.blindFactor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_blindfactor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.KGD_Num)
  return target;
}

size_t KGD_Num::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.KGD_Num)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string num = 1;
  if (!this->_internal_num().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_num());
  }

  // string blindFactor = 2;
  if (!this->_internal_blindfactor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blindfactor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KGD_Num::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KGD_Num::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KGD_Num::GetClassData() const { return &_class_data_; }

void KGD_Num::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KGD_Num *>(to)->MergeFrom(
      static_cast<const KGD_Num &>(from));
}


void KGD_Num::MergeFrom(const KGD_Num& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.KGD_Num)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_num().empty()) {
    _internal_set_num(from._internal_num());
  }
  if (!from._internal_blindfactor().empty()) {
    _internal_set_blindfactor(from._internal_blindfactor());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KGD_Num::CopyFrom(const KGD_Num& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.KGD_Num)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KGD_Num::IsInitialized() const {
  return true;
}

void KGD_Num::InternalSwap(KGD_Num* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &num_, lhs_arena,
      &other->num_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &blindfactor_, lhs_arena,
      &other->blindfactor_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KGD_Num::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_commitment_2eproto_getter, &descriptor_table_commitment_2eproto_once,
      file_level_metadata_commitment_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safeheron::proto::KGD*
Arena::CreateMaybeMessage< ::safeheron::proto::KGD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::KGD >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::KGD_Num*
Arena::CreateMaybeMessage< ::safeheron::proto::KGD_Num >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::KGD_Num >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
